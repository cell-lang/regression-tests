schema RelAutoA {
  a_bool_var    : Bool    = false;
  a_symb_var    : Symbol  = :none;
  an_int_var    : Int     = 0;
  a_float_var   : Float   = 0.0;
  a_string_var  : String  = "";

  a_time_span_var : TimeSpan  = :msecs(0);

  a_date_rec_var  : DateRec       = (day: 0, month: 0, year: 0);
  a_date_var      : DateTagTuple  = :date(0, 0, 0);

  a_rect_var        : Rect      = (bottom_left: point(x: 0, y: 0), width: 0.0, height: 0.0, color: :white);
  a_point_var       : Point     = point(x: 0, y: 0);
  an_any_point_var  : AnyPoint  = point(x: 0, y: 0);

  a_tuple_var : (Float, String, Int*) = (0.0, "", ());

  a_bool_seq_var      : Bool*     = ();
  an_int_seq_var      : Int*      = ();
  a_float_seq_var     : Float*    = ();
  a_point_seq_var     : Point*    = ();
  a_time_span_seq_var : TimeSpan* = ();

  an_int_to_symb_map_var  : [Int -> Symbol] = [];

  a_bool_unary_rel(Bool);
  a_symb_unary_rel(Symbol);
  an_int_unary_rel(Int);
  a_float_unary_rel(Float);
  a_string_unary_rel(String);
  a_bool_seq_unary_rel(Bool*);
  a_symb_seq_unary_rel(Symbol*);
  an_int_seq_unary_rel(Int*);
  a_float_seq_unary_rel(Float*);
  a_string_seq_unary_rel(String*);
  an_any_point_unary_rel(AnyPoint);

  a_symb_float_binary_rel(Symbol, Float) [key: 0];
  a_bool_int_binary_rel(Bool, Int);
  a_string_bool_seq_binary_rel(String, Bool*);
  an_int_seq_time_span_binary_rel(Int*, TimeSpan) [key: 1];

  a_symb_int_bool_seq_ternary_rel(Symbol, Int, Bool*);
  an_int_string_float_seq_ternary_rel(Int, String, Float*);
}

////////////////////////////////////////////////////////////////////////////////

using RelAutoA {
  Bool                  a_bool_var              = a_bool_var;
  Symbol                a_symb_var              = a_symb_var;
  Int                   an_int_var              = an_int_var;
  Float                 a_float_var             = a_float_var;
  String                a_string_var            = a_string_var;
  TimeSpan              a_time_span_var         = a_time_span_var;
  DateRec               a_date_rec_var          = a_date_rec_var;
  DateTagTuple          a_date_var              = a_date_var;
  Rect                  a_rect_var              = a_rect_var;
  Point                 a_point_var             = a_point_var;
  AnyPoint              an_any_point_var        = an_any_point_var;
  (Float, String, Int*) a_tuple_var             = a_tuple_var;
  Bool*                 a_bool_seq_var          = a_bool_seq_var;
  Int*                  an_int_seq_var          = an_int_seq_var;
  Float*                a_float_seq_var         = a_float_seq_var;
  Point*                a_point_seq_var         = a_point_seq_var;
  TimeSpan*             a_time_span_seq_var     = a_time_span_seq_var;
  [Int -> Symbol]       an_int_to_symb_map_var  = an_int_to_symb_map_var;

  [Bool]     a_bool_unary_rel       = [x : x <- a_bool_unary_rel];
  [Symbol]   a_symb_unary_rel       = [x : x <- a_symb_unary_rel];
  [Int]      an_int_unary_rel       = [x : x <- an_int_unary_rel];
  [Float]    a_float_unary_rel      = [x : x <- a_float_unary_rel];
  [String]   a_string_unary_rel     = [x : x <- a_string_unary_rel];
  [Bool*]    a_bool_seq_unary_rel   = [x : x <- a_bool_seq_unary_rel];
  [Symbol*]  a_symb_seq_unary_rel   = [x : x <- a_symb_seq_unary_rel];
  [Int*]     an_int_seq_unary_rel   = [x : x <- an_int_seq_unary_rel];
  [Float*]   a_float_seq_unary_rel  = [x : x <- a_float_seq_unary_rel];
  [String*]  a_string_seq_unary_rel = [x : x <- a_string_seq_unary_rel];
  [AnyPoint] an_any_point_unary_rel = [x : x <- an_any_point_unary_rel];

  Bool a_bool_unary_rel(Bool x)           = a_bool_unary_rel(x);
  Bool a_symb_unary_rel(Symbol x)         = a_symb_unary_rel(x);
  Bool an_int_unary_rel(Int x)            = an_int_unary_rel(x);
  Bool a_float_unary_rel(Float x)         = a_float_unary_rel(x);
  Bool a_string_unary_rel(String x)       = a_string_unary_rel(x);
  Bool a_bool_seq_unary_rel(Bool* x)      = a_bool_seq_unary_rel(x);
  Bool a_symb_seq_unary_rel(Symbol* x)    = a_symb_seq_unary_rel(x);
  Bool an_int_seq_unary_rel(Int* x)       = an_int_seq_unary_rel(x);
  Bool a_float_seq_unary_rel(Float* x)    = a_float_seq_unary_rel(x);
  Bool a_string_seq_unary_rel(String* x)  = a_string_seq_unary_rel(x);
  Bool an_any_point_unary_rel(AnyPoint x) = an_any_point_unary_rel(x);

  [(Symbol, Float)]  a_symb_float_binary_rel         = [(x, y) : x y <- a_symb_float_binary_rel];
  [(Bool, Int)]      a_bool_int_binary_rel           = [(x, y) : x y <- a_bool_int_binary_rel];
  [(String, Bool*)]  a_string_bool_seq_binary_rel    = [(x, y) : x y <- a_string_bool_seq_binary_rel];
  [(Int*, TimeSpan)] an_int_seq_time_span_binary_rel = [(x, y) : x y <- an_int_seq_time_span_binary_rel];

  Float a_symb_float_binary_rel(Symbol x) = a_symb_float_binary_rel(x);

  Bool a_symb_float_binary_rel(Symbol x, Float y)          = a_symb_float_binary_rel(x, y);
  Bool a_bool_int_binary_rel(Bool x, Int y)                = a_bool_int_binary_rel(x, y);
  Bool a_string_bool_seq_binary_rel(String x, Bool* y)     = a_string_bool_seq_binary_rel(x, y);
  Bool an_int_seq_time_span_binary_rel(Int* x, TimeSpan y) = an_int_seq_time_span_binary_rel(x, y);

  [(Symbol, Int, Bool*)]  a_symb_int_bool_seq_ternary_rel =
    [(x, y, z) : x y z <- a_symb_int_bool_seq_ternary_rel];

  [(Int, String, Float*)] an_int_string_float_seq_ternary_rel =
    [(x, y, z) : x y z <- an_int_string_float_seq_ternary_rel];

  Bool a_symb_int_bool_seq_ternary_rel(Any x, Int y, Bool* z) =
    x :: Symbol and a_symb_int_bool_seq_ternary_rel(x, y, z);

  Bool an_int_string_float_seq_ternary_rel(Int x, String y, Float* z) =
    an_int_string_float_seq_ternary_rel(x, y, z);
}

////////////////////////////////////////////////////////////////////////////////

using RelAutoA {
  Float     lookup_by_symb(Symbol symb)         = only([f : f <- a_symb_float_binary_rel(symb, ?)]);
  Symbol    lookup_by_float(Float float)        = only([s : s <- a_symb_float_binary_rel(?, float)]);
  Bool      lookup_by_int(Int int)              = only([b : b <- a_bool_int_binary_rel(?, int)]);
  Bool*     lookup_by_string(String str)        = only([bs : bs <- a_string_bool_seq_binary_rel(str, ?)]);
  String    lookup_by_bools(Bool* bools)        = only([s : s <- a_string_bool_seq_binary_rel(?, bools)]);
  TimeSpan  lookup_by_ints(Int* ints)           = only([ts : ts <- an_int_seq_time_span_binary_rel(ints, ?)]);
  Int*      lookup_by_timespan(TimeSpan tspan)  = only([ns : ns <- an_int_seq_time_span_binary_rel(?, tspan)]);

  Float  lookup(Symbol symb) = lookup_by_symb(symb);
  Symbol lookup(Float float) = lookup_by_float(float);
  Bool   lookup(Int int)     = lookup_by_int(int);

  Bool*     alt_lookup(String str)      = lookup_by_string(str);
  TimeSpan  alt_lookup(Int* ints)       = lookup_by_ints(ints);
  Int*      alt_lookup(TimeSpan tspan)  = lookup_by_timespan(tspan);

  [(Symbol, Float)] symbs_and_floats = [(s, f) : s f <- a_symb_float_binary_rel];

  Bool has_string_bool_seq_pair(String s, Bool* bs) = a_string_bool_seq_binary_rel(s, bs);
}

////////////////////////////////////////////////////////////////////////////////

RelAutoA.my_msg {

}

////////////////////////////////////////////////////////////////////////////////

type SetRelAutoAState = set_rel_auto_a_state(
  a_bool_var    : Bool,
  a_symb_var    : Symbol,
  an_int_var    : Int,
  a_float_var   : Float,
  a_string_var  : String,

  a_time_span_var : TimeSpan,

  a_rect_var        : Rect,
  a_date_rec_var    : DateRec,
  a_date_var        : DateTagTuple,
  a_point_var       : Point,
  an_any_point_var  : AnyPoint,

  a_tuple_var : (Float, String, Int*),

  a_bool_seq_var      : Bool*,
  an_int_seq_var      : Int*,
  a_float_seq_var     : Float*,
  a_point_seq_var     : Point*,
  a_time_span_seq_var : TimeSpan*,

  an_int_to_symb_map_var  : [Int -> Symbol],

  a_bool_unary_rel        : [Bool],
  a_symb_unary_rel        : [Symbol],
  an_int_unary_rel        : [Int],
  a_float_unary_rel       : [Float],
  a_string_unary_rel      : [String],
  a_bool_seq_unary_rel    : [Bool*],
  a_symb_seq_unary_rel    : [Symbol*],
  an_int_seq_unary_rel    : [Int*],
  a_float_seq_unary_rel   : [Float*],
  a_string_seq_unary_rel  : [String*],
  an_any_point_unary_rel  : [AnyPoint],

  a_symb_float_binary_rel         : [Symbol, Float],
  a_bool_int_binary_rel           : [Bool, Int],
  a_string_bool_seq_binary_rel    : [String, Bool*],
  an_int_seq_time_span_binary_rel : [Int*, TimeSpan], 

  a_symb_int_bool_seq_ternary_rel     : [Symbol, Int, Bool*],
  an_int_string_float_seq_ternary_rel : [Int, String, Float*]
);


RelAutoA.SetRelAutoAState {
  set a_bool_var             = this.a_bool_var;
  set a_symb_var             = this.a_symb_var;
  set an_int_var             = this.an_int_var;
  set a_float_var            = this.a_float_var;
  set a_string_var           = this.a_string_var;
  set a_time_span_var        = this.a_time_span_var;
  set a_rect_var             = this.a_rect_var;
  set a_date_rec_var         = this.a_date_rec_var;
  set a_date_var             = this.a_date_var;
  set a_point_var            = this.a_point_var;
  set an_any_point_var       = this.an_any_point_var;
  set a_tuple_var            = this.a_tuple_var;
  set a_bool_seq_var         = this.a_bool_seq_var;
  set an_int_seq_var         = this.an_int_seq_var;
  set a_float_seq_var        = this.a_float_seq_var;
  set a_point_seq_var        = this.a_point_seq_var;
  set a_time_span_seq_var    = this.a_time_span_seq_var;
  set an_int_to_symb_map_var = this.an_int_to_symb_map_var;

  delete a_bool_unary_rel(*);
  delete a_symb_unary_rel(*);
  delete an_int_unary_rel(*);
  delete a_float_unary_rel(*);
  delete a_string_unary_rel(*);
  delete a_bool_seq_unary_rel(*);
  delete a_symb_seq_unary_rel(*);
  delete an_int_seq_unary_rel(*);
  delete a_float_seq_unary_rel(*);
  delete a_string_seq_unary_rel(*);
  delete an_any_point_unary_rel(*);

  delete a_symb_float_binary_rel(*, *);
  delete a_bool_int_binary_rel(*, *);
  delete a_string_bool_seq_binary_rel(*, *);
  delete an_int_seq_time_span_binary_rel(*, *);

  delete a_symb_int_bool_seq_ternary_rel(*, *, *);
  delete an_int_string_float_seq_ternary_rel(*, *, *);

  for x <- rand_sort([a : a <- this.a_bool_unary_rel])        insert a_bool_unary_rel(x);
  for x <- rand_sort([a : a <- this.a_symb_unary_rel])        insert a_symb_unary_rel(x);
  for x <- rand_sort([a : a <- this.an_int_unary_rel])        insert an_int_unary_rel(x);
  for x <- rand_sort([a : a <- this.a_float_unary_rel])       insert a_float_unary_rel(x);
  for x <- rand_sort([a : a <- this.a_string_unary_rel])      insert a_string_unary_rel(x);
  for x <- rand_sort([a : a <- this.a_bool_seq_unary_rel])    insert a_bool_seq_unary_rel(x);
  for x <- rand_sort([a : a <- this.a_symb_seq_unary_rel])    insert a_symb_seq_unary_rel(x);
  for x <- rand_sort([a : a <- this.an_int_seq_unary_rel])    insert an_int_seq_unary_rel(x);
  for x <- rand_sort([a : a <- this.a_float_seq_unary_rel])   insert a_float_seq_unary_rel(x);
  for x <- rand_sort([a : a <- this.a_string_seq_unary_rel])  insert a_string_seq_unary_rel(x);
  for x <- rand_sort([a : a <- this.an_any_point_unary_rel])  insert an_any_point_unary_rel(x);

  for x, y <- rand_sort([(a, b) : a b <- this.a_symb_float_binary_rel])          insert a_symb_float_binary_rel(x, y);
  for x, y <- rand_sort([(a, b) : a b <- this.a_bool_int_binary_rel])            insert a_bool_int_binary_rel(x, y);
  for x, y <- rand_sort([(a, b) : a b <- this.a_string_bool_seq_binary_rel])     insert a_string_bool_seq_binary_rel(x, y);
  for x, y <- rand_sort([(a, b) : a b <- this.an_int_seq_time_span_binary_rel])  insert an_int_seq_time_span_binary_rel(x, y);

  for x, y, z <- rand_sort([(a, b, c) : a b c <- this.a_symb_int_bool_seq_ternary_rel])       insert a_symb_int_bool_seq_ternary_rel(x, y, z);
  for x, y, z <- rand_sort([(a, b, c) : a b c <- this.an_int_string_float_seq_ternary_rel])   insert an_int_string_float_seq_ternary_rel(x, y, z);
}
