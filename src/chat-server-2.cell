schema ChatServer2CoreState {
  username(UserId, String) [key: 0, key: 1];
  joined(UserId, RoomId);
}

////////////////////////////////////////////////////////////////////////////////

using ChatServer2CoreState {
  Bool logged_in(UserId user_id)    = username(user_id, *);

  Bool already_in_use(String name)  = username(*, name);
}

////////////////////////////////////////////////////////////////////////////////

using ChatServer2CoreState {
  LoginCheck login_check(UserId user_id, String name) =
    if logged_in(user_id)   then :already_logged_in   else
    if already_in_use(name) then :name_already_in_use else
                                 :ok;

  LogoutCheck logout_check(UserId user_id) = if logged_in(user_id) then :ok else :not_logged_in;

  JoinRoomCheck join_room_check(UserId user_id) = if logged_in(user_id) then :ok else :not_logged_in;

  LeaveRoomCheck leave_room_check(UserId user_id, RoomId room_id) =
    if not logged_in(user_id)       then :not_logged_in else
    if not joined(user_id, room_id) then :not_in_room   else
                                         :ok;

  ActionCheck action_check(ChatServerCoreAction action) =
    login()   = login_check(action.user, action.name),
    logout()  = logout_check(action.user),
    join()    = join_room_check(action.user),
    leave()   = leave_room_check(action.user, action.room);
}

////////////////////////////////////////////////////////////////////////////////

ChatServer2CoreState.ChatServerCoreAction {
  safe_do(this);
}

////////////////////////////////////////////////////////////////////////////////

using ChatServer2CoreState {
  safe_do(ChatServerCoreAction action) {
    check_res = action_check(action);
    do(action) if check_res == :ok;
  }

  do(Login msg) {
    insert username(msg.user, msg.name);
  }

  do(Logout msg) {
    user_id = msg.user;
    delete username(user_id, *), joined(user_id, *);
  }

  do(JoinRoom msg) {
    insert joined(msg.user, msg.room);
  }

  do(LeaveRoom msg) {
    delete joined(msg.user, msg.room);
  }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

schema ChatServer2 : ChatServer2CoreState {
  msg_counter : Nat = 0;

  pending_inputs(Nat, Byte*) [key: 0];
  data_to_send(Nat, (Nat, String)) [key: 0];
}

////////////////////////////////////////////////////////////////////////////////

using ChatServer2 {
  ActionCheck action_check(ChatServerCoreAction action) =
    login()   = login_check(action.user, action.name),
    logout()  = logout_check(action.user),
    join()    = join_room_check(action.user),
    leave()   = leave_room_check(action.user, action.room);

  SendMsgToUserCheck action_check(SendMsgToUser msg) =
    if not logged_in(msg.sender)        then :not_logged_in    else
    if not already_in_use(msg.receiver) then :unknown_receiver else
                                                        :ok;

  SendMsgToRoomCheck action_check(SendMsgToRoom msg) =
    if not logged_in(msg.sender)          then :not_logged_in else
    if not joined(msg.sender, msg.target) then :not_in_room   else
                                                          :ok;
}

////////////////////////////////////////////////////////////////////////////////

ChatServer2.ChatServerMsg {
  do(this);
}

////////////////////////////////////////////////////////////////////////////////

using ChatServer2 {
  do(Connect msg) {
    insert pending_inputs(msg.channel, ());
  }


  do(Disconnect msg) {
    channel = msg.channel;
    delete pending_inputs(channel, ()); ## BUG? WHY ISN'T IT delete pending_inputs(channel, *) ?
    super <- logout(user: channel);
  }


  do(Received msg) {
    channel = msg.channel;
    new_data = msg.data;
    pend_data = pending_inputs(channel);

    if new_data == ascii_newline {
      update pending_inputs(channel, ());
      maybe_msg = try_parse_msg(pend_data, channel);
      if maybe_msg != nothing {
        do(value(maybe_msg));
      }
      else {
        insert data_to_send(msg_counter, (channel, "ERROR syntax error"));
        set msg_counter = nat(msg_counter + 1);
      }
    }
    else {
      update pending_inputs(channel, (pend_data | new_data));
    }
  }


  do(Sent msg) {
    delete data_to_send(msg.msg_id, *);
  }
}

////////////////////////////////////////////////////////////////////////////////

using ChatServer2 {
  do(Login msg) {
    user = msg.user;
    name = msg.name;

    check_res = login_check(user, name);

    super <- msg if check_res == :ok;

    resp_msg = match (check_res)
      ok                  = "OK",
      already_logged_in   = "ERROR already logged in",
      name_already_in_use = "ERROR name already in use";

    update data_to_send(msg_counter, (user, resp_msg));
    set msg_counter = nat(msg_counter + 1);
  }


  do(Logout msg) {
    super <- msg;
  }


  do(JoinRoom msg) {
    user = msg.user;

    check_res = join_room_check(user);

    super <- msg if check_res == :ok;

    resp_msg = if check_res == :ok then "OK" else "ERROR not logged in";

    update data_to_send(msg_counter, (user, resp_msg));
    set msg_counter = nat(msg_counter + 1);
  }


  do(LeaveRoom msg) {
    user = msg.user;
    room = msg.room;

    check_res = leave_room_check(user, room);

    super <- msg if check_res == :ok;

    resp_msg = match (check_res)
      ok              = "OK",
      not_logged_in   = "ERROR not logged in",
      not_in_room     = "ERROR never joined room";

    update data_to_send(msg_counter, (user, resp_msg));
    set msg_counter = nat(msg_counter + 1);
  }
}

////////////////////////////////////////////////////////////////////////////////

using ChatServer2 {
  do(SendMsgToUser msg) {
    check_res = action_check(msg);

    resp_msg = match (check_res)
      not_logged_in     = "ERROR not logged in",
      unknown_receiver  = "ERROR unknown user",
      ok                = "OK";

    insert data_to_send(msg_counter, (msg.sender, resp_msg));
    counter = nat(msg_counter + 1);

    if check_res == :ok {
      fwd_msg = "GOTUSERMSG " & username(msg.sender) & " " & msg.msg_text;
      insert data_to_send(counter, (username(!!, msg.receiver), fwd_msg));
      counter = nat(counter + 1);
    }

    set msg_counter = counter;
  }


  do(SendMsgToRoom msg) {
    check_res = action_check(msg);

    resp_msg = match (check_res)
      not_logged_in     = "ERROR not logged in",
      not_in_room       = "ERROR never joined room",
      ok                = "OK";

    insert data_to_send(msg_counter, (msg.sender, resp_msg));
    counter = nat(msg_counter + 1);

    if check_res == :ok {
      fwd_msg = "GOTROOMMSG " & username(msg.sender) & " #" & msg.target & " " & msg.msg_text;
      receivers = [r : r <- joined(?, msg.target)];
      for r @ i <- rand_sort(receivers)
        insert data_to_send(nat(counter + i), (r, fwd_msg));
      counter = nat(counter + |receivers|);
    }

    set msg_counter = counter;
  }
}

////////////////////////////////////////////////////////////////////////////////

using ChatServer2 {
  [Nat -> (Nat, String)] data_to_send_copy = [id -> data : id, data <- data_to_send];
}


Bool RunAllChatServer2Tests() {
  core         : ChatServer2CoreState;
  server(core) : ChatServer2;

  sorted_users = rand_sort(set((u : u, unused_var <- chat_server_test_data_1)));
  conn_ids = merge(([u -> i] : u @ i <- sorted_users));

  for i < |conn_ids| {
    ok = server <- connect(i);
    assert ok;
  }

  for u, s <- chat_server_test_data_1 {
    cid = conn_ids[u];
    for ch <- _untag_(s) {
      ok = server <- received(cid, ch);
      assert ok;
    }
    ok = server <- received(cid, ascii_newline);
    assert ok;
  }

  for i < |conn_ids| {
    ok = server <- disconnect(i);
    assert ok;
  }

  if server.data_to_send_copy != chat_server_exp_res_1 {
    Print("ERROR (1)\n");
    print server.data_to_send_copy;
    print chat_server_exp_res_1;
    return false;
  }

  for i < server.msg_counter {
    ok = server <- sent(i);
    assert ok;
    if |server.data_to_send_copy| != server.msg_counter - i - 1 {
      Print("ERROR (2)\n");
      print i;
      print server.data_to_send_copy;
      return false;
    }
  }

  assert server.data_to_send_copy == [];
  return true;
}
