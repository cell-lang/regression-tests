reactive Filter {
  input:  i : Ta;
  output: o : Ta;
  state:  o : Ta = :a0;
  rules:  o = i if i != :a3 : i;
}

////////////////////////////////////////////////////////////////////////////////

(Ta, Ta)* filter_test_data = (
  (:a1, :a0),
  (:a2, :a2),
  (:a2, :a2),
  (:a3, :a2),
  (:a4, :a4),
  (:a1, :a1)
);


Bool RunBasicFilterTest() {
  f : Filter;

  for i, eo <- filter_test_data {
    f.i = i;
    done = apply f;
    assert done;

    if f.o != eo {
      Print("Filter test error. \nExpected output: " & printed(eo) & "\nActual output:");
      print f.o;
      return false;
    }
  }
  return true;
}


Bool RunNullFilterTest() {
  f  : Filter;
  rf : Filter;

  i_def = false;

  for i, eo <- filter_test_data {
    i_def = i_def or one_in(3);

    if i_def
      f.i = i;

    done = apply f;
    assert done;

    rf.i = i;
    done = apply rf;
    assert done;

    if f.o?? and f.o != rf.o {
      Print("Filter null test error. Reference output: " & printed(rf.o) & ", actual one: " & printed(f.o));
      return false;
    }
  }

  return true;
}


Bool RunAllFilterTests() {
  ok = RunBasicFilterTest();
  return false if not ok;

  for i < 1000 {
    ok = RunNullFilterTest();
    return false if not ok;
  }

  return true;
}
